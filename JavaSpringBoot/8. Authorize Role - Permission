xli mqh many to many giữa user - role, role - permission
viết api cho role và permission 

Completed!!!
Xli chủ yếu ở mapper từ dto sang entity và ngc lại: 
Xử lí sao cho khi get user ra sẽ lấy ra được một list gồm role và permission
Xử lí khi add và update nó thì sẽ chỉ cần add tên role trong user mà k phải add toàn bộ field role.

Viết hàm buildScope để lưu thông tin role và permission vào claim token : 
private String buildScope(User user){
        StringJoiner stringJoiner = new StringJoiner(" ");
        //add role vao scope
        if(!CollectionUtils.isEmpty(user.getRole()))
        user.getRole().forEach(role -> {
            stringJoiner.add(role.getName());

            //add permission vao scope
            if(!CollectionUtils.isEmpty(role.getPermissions()))
            role.getPermissions().forEach(permission -> {
                stringJoiner.add(permission.getName());
            });
        });
        return stringJoiner.toString();
    }
	
Cải tiến phân biệt role và permission trong @PreAuthorize()
  stringJoiner.add("ROLE_" + role.getName());
  
Spring Security kết hợp với OAuth2 để lấy thông tin role và permission từ JWT
. Phần chính chịu trách nhiệm lấy role và permission từ JWT nằm trong cấu hình bộ lọc bảo mật và converter.
  httpSecurity.oauth2ResourceServer(
    oauth2 ->
        oauth2.jwt(
            jwtConfigurer ->
                jwtConfigurer
                    .decoder(customJwtDecoder)
                    .jwtAuthenticationConverter(jwtAuthenticationConverter()))
);
SAU ĐÓ SẼ TIẾN HÀNH CHUYỂN ĐỒI JWT THÀNH ĐỊNH DẠNG MÀ SPRING SECURITY HIỂU ĐƯỢC:
JwtAuthenticationConverter jwtAuthenticationConverter() {
    JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter =
        new JwtGrantedAuthoritiesConverter();
    jwtGrantedAuthoritiesConverter.setAuthorityPrefix("");

    JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
    jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);

    return jwtAuthenticationConverter;
}
Ở đây, JwtGrantedAuthoritiesConverter chuyển đổi các quyền (authority) có trong JWT thành 
các đối tượng GrantedAuthority mà Spring Security hiểu được. Việc set AuthorityPrefix thành chuỗi rỗng ("") 
đảm bảo rằng các role và permission sẽ được giữ nguyên như trong JWT mà không có tiền tố thêm vào (ví dụ như "ROLE_").

Khi sử dụng @PreAuthorize("hasRole('ADMIN')") hoặc @PreAuthorize("hasAuthority('APPROVE_POST')"), 
Spring Security sẽ kiểm tra các role hoặc authority được lấy từ JWT thông qua converter bạn đã cấu hình.

jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);


